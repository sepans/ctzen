type AnswerPick {
  response: Int
  deleted: Boolean
}

type Candidate {
  id: ID
  name: String
  displayName: String
  image: String
  campaignLogo: String
  dob: Date
  pob: String
  state: String
  campaignStart: Date
  campaignEnd: Date
  experience: String
  bio: String
  miscInfo: JSON
  createdAt: Date
  updatedAt: Date
  answers: [CandidateAnswer]
}

type CandidateAnswer {
  id: ID
  title: String
  option1: String
  option2: String
  option3: String
  option4: String
  option5: String
  level: Int
  CandidateResponse: AnswerPick
}

scalar Date

type Error {
  message: String
}

scalar JSON

type MatchingCandidate {
  score: Float
  candidate: Candidate
}

type Mutation {
  addQuestion(input: QuestionInput): Question
  addUser(input: UserInput): User
  userAnswerQuestion(questionId: ID!, response: Int): UserQuestionAnswered
  candidateAnswerQuestion(candidateId: ID!, questionId: ID!, response: Int): Candidate
}

type Query {
  candidates: [Candidate]
  candidate(id: ID!): Candidate
  me: UserInfo
  users: [User]
  user(id: ID!): User
  question(id: ID!): Question
  questions: [Question]
}

type Question {
  id: ID
  title: String
  option1: String
  option2: String
  option3: String
  option4: String
  option5: String
  level: Int
  parent: Question
  children: [Question]
}

input QuestionInput {
  title: String!
  option1: String
  option2: String
  option3: String
  option4: String
  option5: String
  level: Int!
}

type Response {
  id: ID
  response: Int
  question: Question
}

type User {
  id: ID
  username: String
  firstName: String
  lastName: String
  email: String
  password: String
  roles: JSON
  token: String
  answers: [UserAnswer]
}

type UserAnswer {
  id: ID
  title: String
  option1: String
  option2: String
  option3: String
  option4: String
  option5: String
  level: Int
  UserResponse: AnswerPick
}

type UserInfo {
  user: User
  nextQuestion: Question
  matchingCandidates: [MatchingCandidate]
}

input UserInput {
  username: String!
  firstName: String
  lastName: String
  email: String!
  password: String!
  roles: JSON
}

type UserQuestionAnswered {
  user: User
  nextQuestion: Question
}

